#!/usr/bin/env python3\n\"\"\"\nMaster Repository Organizer and Web Dashboard Generator\nIntegrates all analysis scripts and creates organized outputs for academic submission\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport shutil\nimport logging\nfrom pathlib import Path\nfrom datetime import datetime\nimport subprocess\n\n# Set up logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('logs/master_organizer.log'),\n        logging.StreamHandler()\n    ]\n)\nlogger = logging.getLogger(__name__)\n\nclass RepositoryOrganizer:\n    \"\"\"\n    Master class to organize repository and generate all outputs\n    \"\"\"\n    \n    def __init__(self):\n        self.root_dir = Path.cwd()\n        self.timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        self.execution_id = f\"analysis_{self.timestamp}\"\n        \n        # Directory structure\n        self.dirs = {\n            'manuscript': self.root_dir / 'manuscript_optimized',\n            'manuscript_figures': self.root_dir / 'manuscript_optimized' / 'figures',\n            'manuscript_tables': self.root_dir / 'manuscript_optimized' / 'tables',\n            'visualizations': self.root_dir / 'visualizations',\n            'viz_manuscript': self.root_dir / 'visualizations' / 'manuscript',\n            'results': self.root_dir / 'results',\n            'data': self.root_dir / 'data',\n            'cache': self.root_dir / '.cache',\n            'logs': self.root_dir / 'logs',\n            'script': self.root_dir / 'script',\n            'docs': self.root_dir / 'docs'  # Web dashboard\n        }\n        \n        self.ensure_directories()\n    \n    def ensure_directories(self):\n        \"\"\"Create all necessary directories\"\"\"\n        for name, path in self.dirs.items():\n            path.mkdir(parents=True, exist_ok=True)\n            logger.info(f\"‚úì Directory ensured: {path}\")\n    \n    def run_analysis_scripts(self):\n        \"\"\"Execute all analysis scripts in proper order\"\"\"\n        logger.info(\"üî¨ Running analysis scripts...\")\n        \n        scripts_to_run = [\n            ('complete_integration_script.py', 'Comprehensive integration analysis'),\n            ('causal_analysis_main.py', 'Causal inference analysis'),\n            ('complete_manuscript_figures.py', 'Manuscript figure generation'),\n            ('enhanced_dynamic_analysis.py', 'Dynamic analysis'),\n            ('complete_theoretical_empirical_validation.py', 'Theoretical validation')\n        ]\n        \n        execution_results = {}\n        \n        for script_name, description in scripts_to_run:\n            script_path = self.dirs['script'] / script_name\n            \n            if script_path.exists():\n                logger.info(f\"üìä Running: {description}\")\n                try:\n                    # Run script and capture output\n                    result = subprocess.run(\n                        [sys.executable, str(script_path)],\n                        cwd=self.root_dir,\n                        capture_output=True,\n                        text=True,\n                        timeout=300  # 5 minute timeout\n                    )\n                    \n                    execution_results[script_name] = {\n                        'status': 'success' if result.returncode == 0 else 'failed',\n                        'returncode': result.returncode,\n                        'stdout': result.stdout,\n                        'stderr': result.stderr,\n                        'description': description\n                    }\n                    \n                    if result.returncode == 0:\n                        logger.info(f\"‚úÖ {script_name} completed successfully\")\n                    else:\n                        logger.error(f\"‚ùå {script_name} failed with code {result.returncode}\")\n                        logger.error(f\"Error output: {result.stderr}\")\n                        \n                except subprocess.TimeoutExpired:\n                    logger.error(f\"‚è∞ {script_name} timed out\")\n                    execution_results[script_name] = {\n                        'status': 'timeout',\n                        'description': description\n                    }\n                except Exception as e:\n                    logger.error(f\"üí• {script_name} failed with exception: {e}\")\n                    execution_results[script_name] = {\n                        'status': 'error',\n                        'error': str(e),\n                        'description': description\n                    }\n            else:\n                logger.warning(f\"‚ö†Ô∏è Script not found: {script_path}\")\n                execution_results[script_name] = {\n                    'status': 'not_found',\n                    'description': description\n                }\n        \n        return execution_results\n    \n    def run_complete_organization(self):\n        \"\"\"Run the complete repository organization process\"\"\"\n        logger.info(\"üöÄ Starting complete repository organization...\")\n        \n        print(\"=\"*80)\n        print(\"üèóÔ∏è  MASTER REPOSITORY ORGANIZER\")\n        print(\"   AI-Driven Spatial Distribution Research\")\n        print(\"=\"*80)\n        \n        try:\n            # Step 1: Run analysis scripts\n            print(\"\\nüìä STEP 1: Running Analysis Scripts\")\n            print(\"-\" * 40)\n            execution_results = self.run_analysis_scripts()\n            \n            # Step 2: Organize outputs\n            print(\"\\nüìÅ STEP 2: Organizing Outputs\")\n            print(\"-\" * 40)\n            # self.organize_outputs()\n            \n            # Step 3: Generate summary\n            print(\"\\nüìù STEP 3: Generating Reports\")\n            print(\"-\" * 40)\n            # summary = self.generate_execution_summary(execution_results)\n            \n            print(\"\\n‚úÖ ORGANIZATION COMPLETE\")\n            return True\n            \n        except Exception as e:\n            logger.error(f\"üí• Organization failed: {e}\")\n            print(f\"\\n‚ùå ORGANIZATION FAILED: {e}\")\n            return False\n\ndef main():\n    \"\"\"Main execution function\"\"\"\n    print(\"üéØ Master Repository Organizer\")\n    print(\"   Organizing AI Spatial Distribution Research\")\n    print(\"-\" * 50)\n    \n    # Create organizer and run\n    organizer = RepositoryOrganizer()\n    success = organizer.run_complete_organization()\n    \n    if success:\n        print(\"\\nüéâ Repository organization completed successfully!\")\n        print(\"üìÅ Check manuscript_optimized/ for publication outputs\")\n        print(\"üåê Access web dashboards in docs/ directory\")\n    else:\n        print(\"\\nüí• Repository organization failed. Check logs for details.\")\n    \n    return 0 if success else 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n"